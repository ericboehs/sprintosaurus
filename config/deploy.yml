# Name of your application. Used to uniquely configure containers.
service: sprintosaurus

# Name of the container image.
image: ericboehs/sprintosaurus

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: ericboehs

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  cache:
    type: registry
    image: ericboehs/sprintosaurus-build-cache
    options: mode=max

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    DB_HOST: sprintosaurus-db
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
# ssh:
#   user: app

# Use a persistent storage volume.
volumes:
  - "rails_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
boot:
  limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
  wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:17
    port: 127.0.0.1:5432:5432
    roles:
      - web
    env:
      clear:
        POSTGRES_USER: "sprintosaurus"
        POSTGRES_DB: "sprintosaurus_production"
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
